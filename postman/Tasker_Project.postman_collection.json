{
	"info": {
		"_postman_id": "924cfd7f-f6a1-467a-8078-ddcd998626ce",
		"name": "Tasker Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31643916"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"    var value = jsonData[0];\r",
									"    pm.expect(value).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"username\");\r",
									"    pm.expect(value).has.not.ownProperty('fullname')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/user",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"username\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"fullname\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/user/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"user",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The User has created correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"id\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Delete\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"testing-dynamic-user\",\r\n    \"fullname\": \"John Doe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/user",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is not content\", function () {\r",
									"     pm.response.to.have.status(204);\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/user/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"user",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Task",
			"item": [
				{
					"name": "operations",
					"item": [
						{
							"name": "To Start",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code returned Created correct\", function () {\r",
											"     pm.response.to.have.status(202);//Acepted\r",
											" });\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Result is an Object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"The Task has created correct\", function () {\r",
											"    \r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"id\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"placedAt\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"status\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"assignedTo\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status has changed to in progress\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"in-progress\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/{{app_base}}/task/:taskId/start",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{app_base}}",
										"task",
										":taskId",
										"start"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "To Done",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code returned Created correct\", function () {\r",
											"     pm.response.to.have.status(202);//Acepted\r",
											" });\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Result is an Object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"The Task has created correct\", function () {\r",
											"    \r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"id\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"placedAt\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"status\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"assignedTo\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status has changed to done\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"done\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/{{app_base}}/task/:taskId/done",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{app_base}}",
										"task",
										":taskId",
										"done"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "To Pending",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code returned Created correct\", function () {\r",
											"     pm.response.to.have.status(202);//Acepted\r",
											" });\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Result is an Object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"The Task has created correct\", function () {\r",
											"    \r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"id\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"placedAt\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"status\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"assignedTo\");\r",
											"});\r",
											"\r",
											"pm.test(\"The status has changed to pending\", function () {\r",
											"    pm.expect(jsonData.status).to.eql(\"pending\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/{{app_base}}/task/:taskId/pending",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{app_base}}",
										"task",
										":taskId",
										"pending"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Assing To",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code returned Created correct\", function () {\r",
											"     pm.response.to.have.status(202);//Acepted\r",
											" });\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Result is an Object\", function () {\r",
											"    pm.expect(jsonData).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test(\"The Task has created correct\", function () {\r",
											"    \r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"id\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"placedAt\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"status\");\r",
											"    pm.expect(jsonData).has.haveOwnProperty(\"assignedTo\");\r",
											"});\r",
											"\r",
											"pm.test(\"The task has the correct user\", function () {\r",
											"    pm.expect(jsonData.assignedTo).to.eql(\"2\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://{{host}}:{{port}}/{{app_base}}/task/:taskId/assigne/:userId",
									"protocol": "http",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{app_base}}",
										"task",
										":taskId",
										"assigne",
										":userId"
									],
									"variable": [
										{
											"key": "taskId",
											"value": "2"
										},
										{
											"key": "userId",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"    var value = jsonData[0];\r",
									"    pm.expect(value).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"title\");\r",
									"    pm.expect(value).has.ownProperty('description');\r",
									"    pm.expect(value).has.ownProperty('placedAt');\r",
									"    pm.expect(value).has.ownProperty('state');\r",
									"    pm.expect(value).has.ownProperty('assignedTo');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"    var value = jsonData[1];\r",
									"    pm.expect(value).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"title\");\r",
									"    pm.expect(value).has.ownProperty('description');\r",
									"    pm.expect(value).has.ownProperty('placedAt');\r",
									"    pm.expect(value).has.ownProperty('state');\r",
									"    pm.expect(value).has.not.ownProperty('assignedTo');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/taks",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"taks"
							]
						}
					},
					"response": []
				},
				{
					"name": "List by User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"    var value = jsonData[0];\r",
									"    pm.expect(value).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"title\");\r",
									"    pm.expect(value).has.ownProperty('description');\r",
									"    pm.expect(value).has.ownProperty('placedAt');\r",
									"    pm.expect(value).has.ownProperty('state');\r",
									"    pm.expect(value).has.ownProperty('assignedTo');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/taks?assignedTo=jhon",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"taks"
							],
							"query": [
								{
									"key": "assignedTo",
									"value": "jhon"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List with sorting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Result has correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).be.greaterThan(0);\r",
									"    var value = jsonData[0];\r",
									"    pm.expect(value).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"title\");\r",
									"    pm.expect(value).has.ownProperty('description');\r",
									"    pm.expect(value).has.ownProperty('placedAt');\r",
									"    pm.expect(value).has.ownProperty('state');\r",
									"    pm.expect(value).has.ownProperty('assignedTo');\r",
									"});ect(value).has.not.ownProperty('fullname')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/taks?sort=title",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"taks"
							],
							"query": [
								{
									"key": "sort",
									"value": "title"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create without user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    \r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Task has created correct\", function () {\r",
									"    \r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"placedAt\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(jsonData).has.not.haveOwnProperty(\"assignedTo\");\r",
									"});\r",
									"\r",
									"pm.test(\"The status has initialited as pending\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"pending\")\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Delete\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"testing-dynamic-task\",\r\n    \"description\": \"this is a testing task created from postman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/task",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    \r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Task has created correct\", function () {\r",
									"    \r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"placedAt\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(jsonData).has.haveOwnProperty(\"assignedTo\");\r",
									"});\r",
									"\r",
									"pm.test(\"The status has initialited as pending\", function () {\r",
									"    pm.expect(jsonData.status).to.eql(\"pending\")\r",
									"    pm.expect(jsonData.assignedTo).to.eql(\"1\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"Delete\")\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"testing-dynamic-task-2\",\r\n    \"description\": \"this is a testing task created from postman with a user\",\r\n    \"assignedTo\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/task",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code is not content\", function () {\r",
									"     pm.response.to.have.status(204);\r",
									" });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/task/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"task",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost"
		},
		{
			"key": "port",
			"value": "8080"
		},
		{
			"key": "app_base",
			"value": "tasker/v1"
		}
	]
}